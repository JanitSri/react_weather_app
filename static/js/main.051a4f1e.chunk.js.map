{"version":3,"sources":["components/Input.js","utils/Data.js","components/Current.js","components/Forecast.js","components/ErrorOut.js","App.js","reportWebVitals.js","index.js"],"names":["Input","props","Form","className","noValidate","onSubmit","Group","controlId","Control","size","type","placeholder","name","isInvalid","invalidInput","Feedback","Button","getInput","e","preventDefault","city","target","elements","value","trim","getData","url","a","axios","get","https","response","data","jsonData","getCurrentWeather","console","log","URL","process","getForecast","latitude","longitude","getLocalTime","capitalize","str","charAt","toUpperCase","slice","Current","currentData","timeData","time","Row","Col","sys","country","date_time_txt","time_12","src","weather","icon","alt","Math","round","parseInt","main","temp","description","split","map","join","humidity","wind","speed","feels_like","Forecast","forecastData","daily","item","index","Date","dt","toLocaleString","weekday","floor","day","toString","Loading","Container","App","useState","currentWeatherData","setCurrentWeatherData","forecastWeatherData","setForecastWeatherData","setTimeData","setIsInvalid","currentWeatherError","setCurrentWeatherError","forecastError","setforecastError","inputHandler","cityInput","currentWeather","coord","lat","lon","currentTime","forecast","ErrorOut","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.051a4f1e.chunk.js","sourcesContent":["import { Form, Button } from \"react-bootstrap\";\r\n\r\n\r\nfunction Input(props){\r\n  return (\r\n    <Form className=\"mt-3\" noValidate onSubmit={props.onSubmit}>\r\n    <Form.Group controlId=\"validationCity\">\r\n      <Form.Control size=\"lg\" type=\"text\" placeholder=\"Enter City...\" name=\"city\" isInvalid={props.invalidInput}/>\r\n      <Form.Control.Feedback type=\"invalid\">\r\n        <span className=\"error-hint\">\r\n          Please provide a valid city.\r\n        </span>\r\n      </Form.Control.Feedback>\r\n    </Form.Group>\r\n    <Button type=\"submit\" className=\"mt-2\">GET WEATHER</Button>\r\n  </Form>\r\n  );\r\n}\r\n\r\nexport default Input;","import axios from \"axios\";\r\n\r\n// get the city input\r\nexport const getInput = (e) => {\r\n  e.preventDefault();\r\n\r\n  const city = e.target.elements.city.value;\r\n\r\n  if(city.trim() === ''){\r\n    return null;\r\n  }\r\n  return city.trim();\r\n}\r\n\r\n// GET request for the weather data \r\nconst getData = async (url) => {\r\n  let response = await axios.get(url, {https:true});\r\n  let jsonData = await response.data;\r\n  return jsonData;\r\n}\r\n\r\n// get the current weather forecast\r\nexport const getCurrentWeather = (city) => {\r\n  console.log(`GETTING THE CURRENT WEATHER FOR ${city}`);\r\n  const URL = `https://api.openweathermap.org/data/2.5/weather?q=${city}&units=metric&appid=${process.env.REACT_APP_OPENWEATHER_API}`;\r\n  let currentResult = getData(URL);\r\n  return currentResult;\r\n}\r\n\r\n// get the daily forecast for 7 days\r\nexport const getForecast = (city, latitude, longitude) => {\r\n  console.log(`GETTING THE DAILY WEATHER FORECAST FOR ${city}`);\r\n  const URL = `https://api.openweathermap.org/data/2.5/onecall?lat=${latitude}&lon=${longitude}&exclude=current,minutely,hourly,alerts&units=metric&appid=${process.env.REACT_APP_OPENWEATHER_API}`;\r\n  let forecastResult = getData(URL);\r\n  return forecastResult;\r\n}\r\n\r\n// get the local time for the city\r\nexport const getLocalTime = (city, latitude, longitude) => {\r\n  console.log(`GETTING THE LOCAL TIME FOR ${city}`);\r\n  const URL = `https://api.ipgeolocation.io/timezone?apiKey=${process.env.REACT_APP_IPGEOLOCATION_API}&lat=${latitude}&long=${longitude}`;\r\n  let timeResult = getData(URL);\r\n  return timeResult;\r\n}\r\n\r\n// capitalize the first letter of a string\r\nexport const capitalize = (str) => {\r\n  return str.charAt(0).toUpperCase() + str.slice(1);\r\n}\r\n","import { Row, Col } from 'react-bootstrap';\r\n\r\nimport { capitalize} from '../utils/Data'   \r\n\r\nfunction Current(props){\r\n\r\n  const data = props.currentData;\r\n  const timeData = props.time;\r\n\r\n  return (\r\n    <>\r\n      {data != null && timeData != null &&\r\n      <Row className=\"mt-2\">\r\n        <Col className=\"pl-5\">\r\n          <h1 className=\"current-header d-flex justify-content-start\">{data.name}, {data.sys.country}</h1>\r\n          <p className=\"current-loc d-flex justify-content-start\">{timeData.date_time_txt.slice(0,-9)} | {timeData.time_12}</p>\r\n          <div className=\"d-flex justify-content-start\">\r\n            <img className=\"current-img pl-2\" src={`http://openweathermap.org/img/wn/${data.weather[0].icon}.png`} alt=\"weather icon\"></img>\r\n            <p className=\"current-temp align-self-center pl-4 pt-4\">\r\n              {Math.round(parseInt(data.main.temp))} <sup>&deg;c</sup>\r\n            </p>\r\n          </div>\r\n        </Col>\r\n        <Col className=\"current-desc align-self-center pl-5\">\r\n          <p>Condition: {data.weather[0].main}</p>\r\n          <p>Description: {data.weather[0].description.split(' ').map(capitalize).join(' ')}</p>\r\n          <p>Humidity: {data.main.humidity} %</p>\r\n          <p>Wind: {data.wind.speed} m/s</p>\r\n          <p>Feels Like: {Math.round(parseInt(data.main.feels_like))} <sup>&deg;c</sup></p>\r\n        </Col>\r\n      </Row>\r\n      }\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Current;","import { Row, Col } from 'react-bootstrap';\r\n\r\nimport { capitalize } from '../utils/Data'   \r\n\r\nconst Forecast = (props) => {\r\n  \r\n  let data = props.forecastData != null ? props.forecastData.daily : null;\r\n\r\n  return (\r\n    <>\r\n      { data !== null && \r\n        <Row>\r\n          {data.map((item, index) => (\r\n            index !== 0 &&\r\n            <Col key={index.toString()} className=\"forecast-box\">\r\n              <p className=\"mt-1 forecast-date\">{new Date(item.dt*1000).toLocaleString(\"en\",{weekday: \"long\"})}</p>\r\n              <img className=\"forecast-img\" src={`http://openweathermap.org/img/wn/${item.weather[0].icon}.png`} alt=\"weather icon\"></img>\r\n              <p className=\"forecast-temp pt-3\">\r\n                {Math.floor(parseInt(item.temp.day))} <sup>&deg;c</sup>\r\n              </p>\r\n              <p className=\"forecast-cond pt-4\">\r\n                {item.weather[0].main}\r\n              </p>\r\n              <p className=\"forecast-desc\">\r\n              {item.weather[0].description.split(' ').map(capitalize).join(' ')}\r\n              </p>\r\n            </Col>\r\n          ))}\r\n        </Row>\r\n      }\r\n    </>    \r\n  );\r\n};\r\n\r\nexport default Forecast;","import { Container } from 'react-bootstrap';\r\n\r\nfunction Loading(){\r\n  \r\n  return (\r\n    <Container className=\"my-4 error\">\r\n      <p>Error! Try Another City.</p>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default Loading;","import React, { useState } from 'react';\n\nimport './App.css';\nimport Container from 'react-bootstrap/Container'; \nimport Input from './components/Input';\nimport Current from './components/Current';\nimport Forecast from './components/Forecast';\nimport ErrorOut from './components/ErrorOut';\nimport { getInput, getForecast, getCurrentWeather, getLocalTime } from './utils/Data'\n\n\nfunction App() {\n  const [currentWeatherData, setCurrentWeatherData] = useState(null);\n  const [forecastWeatherData, setForecastWeatherData] = useState(null);\n  const [timeData, setTimeData] = useState(null);\n  \n  const [isInvalid, setIsInvalid] = useState(false);\n  \n  const [currentWeatherError, setCurrentWeatherError] = useState(false);\n  const [forecastError, setforecastError] = useState(false);\n\n  const inputHandler = async (e) => {\n    let cityInput = getInput(e);\n    if(cityInput == null){\n      setIsInvalid(true);\n      return;\n    }\n\n    setIsInvalid(false);\n\n    // get current weather data\n    let currentWeather;\n    try {\n      currentWeather = await getCurrentWeather(cityInput);\n      setCurrentWeatherData(currentWeather);\n      setCurrentWeatherError(false);\n\n      let currentTime = await getLocalTime(currentWeather.name, currentWeather.coord.lat, currentWeather.coord.lon);\n      setTimeData(currentTime);\n    } catch (error) {\n      setCurrentWeatherError(true);\n    }\n\n    // get daily forecast data\n    try{\n      const forecast = await getForecast(cityInput, currentWeather.coord.lat, currentWeather.coord.lon);\n      setForecastWeatherData(forecast);\n      setforecastError(false);\n    } catch (error){\n      setforecastError(true);\n    }\n  }\n\n  return (\n    <div className=\"app-bg-color py-5\">\n      <Container className=\"app-font bg-color p-4 text-center\">\n        <Input onSubmit={inputHandler} invalidInput={isInvalid}></Input>\n        {currentWeatherError\n          ? <ErrorOut></ErrorOut>\n          : <Current currentData={currentWeatherData} time={timeData}></Current>\n        }\n        <hr className=\"hr\"></hr>\n        {forecastError\n          ? <ErrorOut></ErrorOut>\n          : <Forecast forecastData={forecastWeatherData}></Forecast>\n        }\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}